# For detailed information about docker-compose visit https://docs.docker.com/compose/
# To start all docker containers required to execute the tests locally run:
# docker-compose up

version: '2'
services:
  amazonsns:
    image: pafortin/goaws
    ports:
      - "4100:4100"
    volumes:
    - ./sns/src/test/travis/:/conf/
  amqp:
    image: rabbitmq:3
    ports:
      - "5672:5672"
  cassandra:
    image: cassandra:3.0.15
    ports:
      - "9042:9042"
  couchbase:
    image: couchbase:community-5.1.1
    ports:
    - "8091-8094:8091-8094"
    - "11210:11210"
  elasticmq:
    image: softwaremill/elasticmq:0.14.6
    ports:
      - "9324:9324"
  dynamodb:
    image: deangiberson/aws-dynamodb-local
    ports:
      - "8001:8000"
  geode:
    container_name: geode
    image: apachegeode/geode:1.8.0
    hostname: geode
    mem_limit: 2g
    expose:
      - "10334"
      - "1099"
      - "7575"
      - "40404"
    ports:
      - "1099:1099"
      - "10334:10334"
      - "7575:7575"
      - "7070:7070"
      - "40404:40404"
      - "8081:8080"
    volumes:
      - ./geode/scripts/:/scripts/
    command: /scripts/geode.sh
  gcloud-pubsub-emulator:
    image: bigtruedata/gcloud-pubsub-emulator
    ports:
      - "8538:8538"
    command: start --host-port=0.0.0.0:8538 --data-dir=/data
  gcloud-pubsub-client:
    image: martynas/gcloud-pubsub-client
    links:
      - "gcloud-pubsub-emulator"
    environment:
      - "PUBSUB_PROJECT_ID=alpakka"
      - "PUBSUB_EMULATOR_HOST=gcloud-pubsub-emulator:8538"
    entrypoint: ""
    command: >
      bash -c "
        python publisher.py alpakka create simpleTopic &&
        python subscriber.py alpakka create simpleTopic simpleSubscription
        python publisher.py alpakka create testTopic &&
        python subscriber.py alpakka create testTopic testSubscription
      "
  ironauth:
    image: iron/auth
    ports:
      - "8090:8090"
  ironmq:
    image: iron/mq
    links:
      - "ironauth:ironauth"
    environment:
      - "AUTH_HOST=http://ironauth:8090"
    ports:
      - "8080:8080"
  kudu-master-data:
    image: kunickiaj/kudu
    volumes:
      - /var/lib/kudu/master
  kudu-tserver-data:
    image: kunickiaj/kudu
    volumes:
      - /var/lib/kudu/tserver
  kudu-master:
    image: kunickiaj/kudu
    ports:
      - 7051:7051
    volumes_from:
      - kudu-master-data
    command: master
  kudu-tserver:
    image: kunickiaj/kudu
    environment:
      - KUDU_MASTER=kudu-master
    ports:
      - 7050:7050
    volumes_from:
      - kudu-tserver-data
    command: tserver
    links:
      - kudu-master
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
    environment:
      - "MINIO_ACCESS_KEY=TESTKEY"
      - "MINIO_SECRET_KEY=TESTSECRET"
    command: server /data
  minio_prep:
    image: mesosphere/aws-cli
    links:
      - "minio"
    environment:
      - "AWS_ACCESS_KEY_ID=TESTKEY"
      - "AWS_SECRET_ACCESS_KEY=TESTSECRET"
    entrypoint: ""
    command: >
      sh -c "
        aws --endpoint-url http://minio:9000 s3api create-bucket --bucket my.test.frankfurt
        aws --endpoint-url http://minio:9000 s3api create-bucket --bucket my-test-us-east-1
      "
  mongo:
    image: mongo
    ports:
      - "27017:27017"
  mqtt:
    image: toke/mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mqtt/src/test/travis:/mqtt/config/conf.d
  orientdb:
    image: orientdb:3.0.4
    ports:
      - "2424:2424"
    environment:
      - "ORIENTDB_ROOT_PASSWORD=root"
    command: /orientdb/bin/server.sh -Dmemory.chunk.size=268435456
